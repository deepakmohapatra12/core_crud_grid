template.html
------------------
<ng-container>
        <a (click)="card=true">View Templates</a>
        <div>
            <dew-row>
                <dew-col [col]="6">
                    <div [className]="'header_wrapper'">
                        <h6>Filtered templates({{ livedataList.length }})</h6>
                    </div>
                </dew-col>
                <dew-col [col]="6">
                    <div [className]="'right_header_wrapper float-right'">
                        <div [className]="'right_header_wrapper float-right'">
                            <div [className]="'filter_search ml-2'">
                                <dew-input [placeholder]="'Suggested Templates'" [maxlength]="maxlength" [minlength]="minlength"
                                    [required]="required" [(ngModel)]="textModel" (ngModelChange)="modelChange()">
                                </dew-input>
                            </div>
                            <form id="demo-2" class="filter_search">
                                <span class="icon icon-close" *ngIf="cancel===true" (click)="contractModel=''"></span>
                                <input type="search" class="form-control" name="search" [(ngModel)]="contractModel" (focus)="cancel=true"
                                    (focusout)="cancel=false" (input)="onSearch($event.target.value)">
                            </form>
                        </div>
                    </div>
                </dew-col>
            </dew-row>
            <dew-row>
                <dew-col [col]="templateConfigurable?.cardNos" class="main mt-4" *ngFor="let user of livedataList | slice:0:onfirstLoad;let i = index">
                    <dew-card (click)="toogleMark(i)" [ngClass]="{'otherclass':user['isSelected']==true}">
                            <dew-card-header>
                                    <div>
                                        <div class="float-left">
                                            <p [className]="'text-subhead-b text-16 p_common'">{{user.eventName}}</p>
                                            <p [className]="'text-14'">Auto 7890</p>
                                            <button [className]="'main_button'">Preferred</button>
                                        </div>
                                        <div [className]="'float-right'" *ngIf="templateConfigurable?.action">
                                            <i [className]="'icon icon-heart text-16 ml-1 pointer'" [ngClass]="{'icon-heart': !user['isLike'], 'icon-heart-fill': user['isLike']}"
                                                (click)="emitLikeIndex(i)"></i>
                                            <dew-icon [icon]="'ic-download'" [size]="'18'" [className]="'pointer ml-1'" (click)="emitDownloadIndex(i)"></dew-icon>
                                            <!-- <dew-btn [type]="'clear'" [size]="'25'" [isFab]="'true'" [fabIcon]="'heart'"></dew-btn> -->
                                        </div>
                                    </div>
                                </dew-card-header>
                        <dew-card-body>
                                <dew-row class="mid_row" *ngIf="templateConfigurable?.midColShow">
                                    <dew-col [col]="templateConfigurable?.cardCols">
                                        <p [className]="'p_common dew-text-dark'">Source</p>
                                        <p [className]="'p_common text-15'">{{user.eventName}}</p>
                                    </dew-col>
                                    <dew-col [col]="templateConfigurable?.cardCols">
                                        <p [className]="'p_common dew-text-dark'">Template for</p>
                                        <p [className]="'text-15 p_common'">{{user.ownerName}}</p>
                                    </dew-col>
                                    <dew-col [col]="templateConfigurable?.cardCols">
                                        <p [className]="'p_common dew-text-dark'">Last Modified On</p>
                                        <p [className]="'text-15 p_common'">{{user.creationDate}}</p>
                                    </dew-col>
                                </dew-row>
                            </dew-card-body>
                        <dew-card-footer *ngIf="templateConfigurable?.lowerColShow">
                            <dew-row>
                                <dew-col [col]="6">
                                    <p [className]="'p_common dew-text-dark'">Clark SinClair</p>
                                    <p [className]="'text-15 p_common'">Created On {{user.creationDate}}</p>
                                </dew-col>
                                <dew-col [col]="6">
                                    <div class="float-right">
                                        <p [className]="'text-15 p_common'">95999444</p>
                                    </div>
                                </dew-col>
                            </dew-row>
                        </dew-card-footer>
                    </dew-card>
                    <!-- <span class="icon icon-completed" *ngIf="user['isSelected']"></span>   -->
                    <span class="checkmark" *ngIf="user['isSelected']">
                        <div class="checkmark_circle"></div>
                        <div class="checkmark_stem"></div>
                        <div class="checkmark_kick"></div>
                    </span>
                    <div [className]="'overlay'" [ngClass]="{'overlay_con':user['isSelected']==true}">
                        <div [className]="'over_lay_btn'">
                            <dew-btn [display]="'Preview'" type="line" (click)="emitPreviewIndex(i)"></dew-btn>
                            <dew-btn [display]="'Select'" type="line" (click)="toogleMark(i)"></dew-btn>
                        </div>
                    </div>
                </dew-col>
            </dew-row>
            <dew-btn [className]="'btn_cent'" [display]="'View More'" type="view" (click)="onfirstLoad=onfirstLoad+4" *ngIf="(livedataList.length>=onfirstLoad)"></dew-btn>
        </div>
    </ng-container>
    
    
    
    
    
    
    template.css
    ---------------
    .main{
    border-radius: 10px;
    position: relative;
}

.main_button{
    color:#555555;
    background-color: whitesmoke;
    border:1px solid grey;
    border-radius: 3px;
}

.p_common{ line-height:10px;}
.overlay {position: absolute;top: 0; bottom: 0;left: 0;right: 0;height: 100%;width: 100%;opacity: 0;transition: .3s ease;background-color: #f8fcff;}
.main:hover .overlay {opacity: 0.9;}
.over_lay_btn {color: white;font-size: 100px;position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%); -ms-transform: translate(-50%, -50%);text-align: center;}
.overlay_con{ display: none;}
.otherclass{ border: 2px solid #31a979!important;} 
.filter_search{
    display: inline-block;
}
//expand search icon css
input {
	outline: none;
}
input[type=search] {
	-webkit-appearance: textfield;
	-webkit-box-sizing: content-box;
	font-family: inherit;
	font-size: 100%;
}

input[type=search] {
	background: #ffffff url(https://static.tumblr.com/ftv85bp/MIXmud4tx/search-icon.png) no-repeat 9px center;
	border: solid 1px #ccc;
	padding: 9px 10px 9px 32px;
    width: 55px;
    margin-right:15px;
	
	-webkit-border-radius: 10em;
	-moz-border-radius: 10em;
	border-radius: 10em;
	
	-webkit-transition: all .5s;
	-moz-transition: all .5s;
	transition: all .5s;
}
input[type=search]:focus {
	width: 130px;
	border-color: grey;
	-webkit-box-shadow: 0 0 5px rgba(109,207,246,.5);
	-moz-box-shadow: 0 0 5px rgba(109,207,246,.5);
	box-shadow: 0 0 5px rgba(109,207,246,.5);
}

#demo2{
    position: relative;
}


input:-moz-placeholder {
	color: #999;
}
input::-webkit-input-placeholder {
	color: #999;
}

/* Demo 2 */
#demo-2 input[type=search] {
    width: 15px;
    padding-left: 10px;
    color: transparent;
    cursor: pointer;
    height: 16px;
}

#demo-2 input[type=search]:focus {
	width: 130px;
	padding-left: 32px;
	color: #000;
	cursor: auto;
}
#demo-2 input[type=search]:focus {
	width: 130px;
	padding-left: 32px;
	color: #000;
	cursor: auto;
}
#demo-2 input:-moz-placeholder {
	color: transparent;
}
#demo-2 input::-webkit-input-placeholder {
	color: transparent;
}

// .icon-completed{
//     position: absolute;
//     top: -9px;
//     right: 10px;
//     display: inline-block;
//     border: 0px;
//     color: #31a979;
// }


//check mark custom css 
.checkmark {
    display:inline-block;
    width: 22px;
    height:22px;
    -ms-transform: rotate(45deg); /* IE 9 */
    -webkit-transform: rotate(45deg); /* Chrome, Safari, Opera */
    transform: rotate(45deg);
    position: absolute;
    top: -9px;
    right: 10px;
}

.checkmark_circle {
    position: absolute;
    width:22px;
    height:22px;
    background-color: #31a979;
    border-radius:11px;
    left:0;
    top:0;
}

.checkmark_stem {
    position: absolute;
    width:3px;
    height:9px;
    background-color:#fff;
    left:11px;
    top:6px;
}

.checkmark_kick {
    position: absolute;
    width:3px;
    height:3px;
    background-color:#fff;
    left:8px;
    top:12px;
}

//check mark custom css end

.icon-close{
    display: block;
    position: absolute;
    margin-left: 150px;
    font-size: 12px;
    margin-top: 12px;
}

.btn_cent{
    display: block;
    width: 100%;
    text-align: center;
    margin-top:10px;
}

.icon-heart-fill {
    content: "\E942";
    color: #cc3554;
}


template.ts
-------------

import { HttpClient, HttpEventType, HttpHeaders, HttpParams, HttpRequest, HttpResponse } from '@angular/common/http';
import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { AUTH_API } from '@dewdrops/globals';
import { LanguageTranslateService, RestClientService, UserService, APIClientService } from '@dewdrops/services';
import { each } from 'lodash/index';
import { TranslateService } from 'ng2-translate';
import { Observable } from 'rxjs/Observable';
import { CollectionFactory } from 'dd-common/dewdrops/core/factories/collection/collection.factory';
import { TemplateSearchModel } from './templatesearch.model';
import { CriteriaInterface } from '@dewdrops/interfaces';

@Component({
    selector: 'dew-template-search',
    templateUrl: './template-search.component.html',
    styleUrls: ['./template-search.component.scss'],
    providers: []
})
export class TemplateSearchComponent implements OnInit {

    searchedText = '';
	
	    fill = '';



    //default number of loading template cards
    onfirstLoad = 4;

    //for search icon issue
    cancel = false;
    card = true;
    // @Input() col = 6;
    // @Input() grid = 4;

    @Input() templateConfigurable = {
        cardNos: 6,
        cardCols: 4,
        action: false,
        midColShow: false,
        lowerColShow: false
    }
    contractModel: string;
    // @Input() records=[];//records array fro docs-template-search.component.ts
    // @Output() searchedText = new EventEmitter();//for template card search action
    @Output() download = new EventEmitter();//for download button action
    @Output() like = new EventEmitter();//for like button action
    @Output() preview = new EventEmitter();//preview button action

    constructor() { }

    ngOnInit() {
        this.onSearch('');
    }

    // single mark contract card
    toogleMark(index) {
        console.log(index);
        for (let i = 0; i < this.livedataList.length; i++) {
            if (i === index) {
                this.livedataList[i]['isSelected'] = this.livedataList[i]['isSelected'] === true ? false : true;
            } else {
                this.livedataList[i]['isSelected'] = false;
            }
        }
    }

    // download the contract card
    emitDownloadIndex(i) {
        this.download.emit(i);
    }

    // like the contract card
    emitLikeIndex(i) {
        // if(this.livedataList[i]['isLike'] === true){
        //     this.livedataList[i]['isLike'] = false
        // }
        // else{
        //     this.livedataList[i]['isLike'] = true;
        // }
        this.livedataList[i]['isLike'] = this.livedataList[i]['isLike'] === true ? false: true;
        this.like.emit(i);
    }

    // previewing the contract card
    emitPreviewIndex(i) {
        this.preview.emit(i);
    }


    //search operation content will go here


    dataList: TemplateSearchModel[];
    livedataList: TemplateSearchModel[];
    @Input()
    transformFn: Function;
    @Input()
    searchCriteria: CriteriaInterface;

    public _records: Array<TemplateSearchModel> | CollectionFactory<TemplateSearchModel>;
    @Input() set records(value: Array<TemplateSearchModel> | CollectionFactory<TemplateSearchModel>) {
        console.log('values', value);
        this._records = value;
        if (this._records instanceof Array) {
            this.dataList = this._records.map(
                (item, index) => {
                    const transformedItem = this.transform(item);
                    transformedItem.id = index;
                    return transformedItem;
                }
            )
        }
    }

    public transform(transformFnArgs: any) {
        if (this.transformFn) {
            return this.transformFn(transformFnArgs);
        } else {
            return {
                eventName: transformFnArgs.eventName,
                ownerName: transformFnArgs.ownerName,
                creationDate: transformFnArgs.creationDate,
                eventType: transformFnArgs.eventType,

            };
        }
    }

    onSearch(searchedText: string) {
        if (this._records instanceof Array) {
            this.livedataList = this.search(searchedText);
        } else {
            if (searchedText) {
                if (this.searchCriteria) {
                    this.searchCriteria.value = searchedText;
                    this._records.filterBy(this.searchCriteria).applyFilter();
                }
            } else {
                if (this.searchCriteria) {
                    this._records.removeFilter(this.searchCriteria.fieldName);
                }
            }
            this._records.applyPaginate();
            this._records.list$.subscribe(
                response => {
                    this.livedataList = response.map(
                        (item, index) => {
                            const transformedItem = this.transform(item);
                            transformedItem.id = index;
                            return transformedItem;
                        }
                    );
                }
            );
        }
    }
    search(searchedText: any) {
        if (searchedText) {
            return this.dataList.filter(
                (dataList) => {
                    // case insensitive comparision
                    let found = -1;
                    const displayName = this.getDisplayName(dataList);
                    if (displayName) {
                        found = displayName.toLowerCase().indexOf(searchedText.toLowerCase());
                    }
                    return found > -1;
                }
            );
        } else {
            return this.dataList;
        }
    }

    getDisplayName(value) {
        return value.eventName
    }

}



docs.html
------------
<dew-section [heading]="'Template Search'">
        <dew-section-body>
            <dew-tabset [type]="'main'">
                <dew-tab [heading]="'@working'" [id]="'atTab1'">
                    <dew-template-search
                     [templateConfigurable]=templateConfigure
                     (download)="getDownload($event)"
                     (like)="getLike($event)"
                     (preview)="getPreviewContract($event)"
                     [records]="records"
                     [searchCriteria]="criteria">
                    
                    </dew-template-search>
                </dew-tab>
                <dew-tab [heading]="'@input'" [id]="'atTab2'">
                </dew-tab>
                <dew-tab [heading]="'@sample code'" [id]="'atTab4'">
                </dew-tab>
            </dew-tabset>
        </dew-section-body>
    </dew-section>
    
    docs.ts
    -----------
    
    import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { CollectionFactory } from '@dewdrops/factories';
import { APIClientService } from '@dewdrops/services';
import { map } from 'rxjs/operators';

@Component({
  selector: 'dew-docs-templatesearch',
  templateUrl: './docs-template-search.component.html',
  styleUrls: ['./docs-template-search.component.scss']
})
export class DocsTemplateSearchComponent implements OnInit {

  testData: any[];
  dataSource: CollectionFactory;

  criteria = {
    fieldName: 'name',
    value: '',
    operation: 'EQUALS'
  };
  
  constructor(public _apiClient: APIClientService) {
    this.dataSource = new CollectionFactory('/api/a/isource/events/templates', _apiClient);
    this.dataSource.count(20);
  }

  //card columns grid , inside card column grid and (like and download actions) object
  templateConfigure = {
    cardNos: 6,
    cardCols: 4,
    action: true,
    midColShow:true,
    lowerColShow:true
  }

  records = [
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 2010174766 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 2010174765 },
    { eventName: "IBM", ownerName: "Deepak Kumar", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "IBM", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "Edited name", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017458 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017475 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 2010174766 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 2010174765 },
    { eventName: "UBER", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017476 },
    { eventName: "Edited name", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017458 },
    { eventName: "OLA", ownerName: "Sharma Navin", creationDate: "2018-12-28", eventType: "RFI", eventId: 201017475 }
]
  ngOnInit() {}

  //download button
  getDownload(index) {
    console.log(index);
    alert(index);
  }

  //like button
  getLike(index) {
    console.log(index);
    alert(index);
  }


  //preview button
  getPreviewContract(index) {
    console.log(index);
    alert(index);
  }


  //contract button
  getContracts(data) {
    console.log(data);
  }
}



